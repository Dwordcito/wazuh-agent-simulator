# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SyncSchema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Data
    def Seq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Data
    def Session(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Data
    def Operation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Data
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Data
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Data
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # Data
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Data
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def DataStart(builder):
    builder.StartObject(5)

def Start(builder):
    DataStart(builder)

def DataAddSeq(builder, seq):
    builder.PrependUint64Slot(0, seq, 0)

def AddSeq(builder, seq):
    DataAddSeq(builder, seq)

def DataAddSession(builder, session):
    builder.PrependUint64Slot(1, session, 0)

def AddSession(builder, session):
    DataAddSession(builder, session)

def DataAddOperation(builder, operation):
    builder.PrependInt8Slot(2, operation, 0)

def AddOperation(builder, operation):
    DataAddOperation(builder, operation)

def DataAddIndex(builder, index):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(index), 0)

def AddIndex(builder, index):
    DataAddIndex(builder, index)

def DataAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    DataAddData(builder, data)

def DataStartDataVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartDataVector(builder, numElems):
    return DataStartDataVector(builder, numElems)

def DataEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataEnd(builder)
