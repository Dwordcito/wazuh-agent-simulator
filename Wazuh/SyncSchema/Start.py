# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SyncSchema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Start(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Start()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStart(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Start
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Start
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Start
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def StartStart(builder):
    builder.StartObject(2)

def Start(builder):
    StartStart(builder)

def StartAddMode(builder, mode):
    builder.PrependInt8Slot(0, mode, 0)

def AddMode(builder, mode):
    StartAddMode(builder, mode)

def StartAddSize(builder, size):
    builder.PrependUint64Slot(1, size, 0)

def AddSize(builder, size):
    StartAddSize(builder, size)

def StartEnd(builder):
    return builder.EndObject()

def End(builder):
    return StartEnd(builder)
