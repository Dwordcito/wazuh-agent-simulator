# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SyncSchema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EndAck(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EndAck()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEndAck(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EndAck
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EndAck
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # EndAck
    def Session(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def EndAckStart(builder):
    builder.StartObject(2)

def Start(builder):
    EndAckStart(builder)

def EndAckAddStatus(builder, status):
    builder.PrependInt8Slot(0, status, 0)

def AddStatus(builder, status):
    EndAckAddStatus(builder, status)

def EndAckAddSession(builder, session):
    builder.PrependUint64Slot(1, session, 0)

def AddSession(builder, session):
    EndAckAddSession(builder, session)

def EndAckEnd(builder):
    return builder.EndObject()

def End(builder):
    return EndAckEnd(builder)
